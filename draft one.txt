#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME680.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SDS011.h>

#define DHTPIN 2
#define DHTTYPE DHT11
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
WiFiClient espClient;
PubSubClient client(espClient);
DHT dht(DHTPIN, DHTTYPE);
BH1750 lightSensor;
SDS011 sds;

const int relayFanPin = 26;
const int relayHumidPin = 27;
const int aqltPin = 34;
int airStatus;

const char* ssid = "Exploratory2";
const char* password = "!tggs2025";
const char* mqttServer = "202.44.44.233";
const int mqttPort = 1883;
const char* mqttTopic = "kerk/json";

void setup() {
    Serial.begin(115200);
    MQTTSetup();
    pinMode(relayFanPin, OUTPUT);
    pinMode(relayHumidPin, OUTPUT);
    pinMode(aqltPin, INPUT);
    lightSetup();
    dht.begin();
    PMSetup();
    oledSetup();
}

void loop() {
    lightLoop();
    hNtLoop();
    aqltLoop();
    PMLoop();
    oledLoop();
    MQTTLoop();
    delay(1000);
}

void lightSetup() {
    Wire.begin();
    if (lightSensor.begin()) {
        Serial.println("BH1750 sensor initialized successfully.");
    } else {
        Serial.println("Error: Failed to initialize BH1750 sensor.");
        while (1);
    }
}

void lightLoop() {
    float lux = lightSensor.readLightLevel();
    Serial.print("Light Level: ");
    Serial.print(lux);
    Serial.println(" lux");
}

void hNtLoop() {
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    
    if (!isnan(temperature) && !isnan(humidity)) {
        Serial.print("Temperature: ");
        Serial.print(temperature);
        Serial.print(" °C\tHumidity: ");
        Serial.print(humidity);
        Serial.println(" %");
    } else {
        Serial.println("Failed to read DHT sensor!");
    }
}

void aqltLoop() {
    airStatus = digitalRead(aqltPin);
    if (airStatus == HIGH) {
        Serial.println("Poor Air Quality");
    } else {
        Serial.println("Good Air Quality");
    }
}

void oledSetup() {
    if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
        Serial.println(F("SSD1306 allocation failed"));
        for (;;);
    }
    display.clearDisplay();
}

void oledLoop() {
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    airStatus = digitalRead(aqltPin);

    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.printf("Temp: %.1fC\n", temperature);
    display.printf("Humidity: %.1f%%\n", humidity);
    display.printf("Air: %s\n", airStatus == HIGH ? "Poor" : "Good");
    display.display();
}

void PMSetup() {
    Serial2.begin(9600, SERIAL_8N1, 16, 17);
    sds.begin(&Serial2);
    Serial.println("SDS011 Sensor Test Started...");
    delay(2000);
}

void PMLoop() {
    float pm25 = 0, pm10 = 0;
    if (sds.read(&pm25, &pm10) == 0) {
        Serial.printf("PM2.5: %.2f µg/m^3, PM10: %.2f µg/m^3\n", pm25, pm10);
    } else {
        Serial.println("Failed to read SDS011 Sensor.");
    }
}

void MQTTSetup() {
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to Wi-Fi");
    client.setServer(mqttServer, mqttPort);
    reconnect();
}

void MQTTLoop() {
    if (!client.connected()) {
        reconnect();
    }
    client.loop();
    
    float temperature = dht.readTemperature();
    float humidity = dht.readHumidity();
    float lux = lightSensor.readLightLevel();
    float pm25 = 0, pm10 = 0;
    sds.read(&pm25, &pm10);
    airStatus = digitalRead(aqltPin);

    StaticJsonDocument<200> doc;
    doc["temperature"] = temperature;
    doc["humidity"] = humidity;
    doc["airquality"] = airStatus;
    doc["light"] = lux;
    doc["PM2.5"] = pm25;

    char jsonBuffer[512];
    serializeJson(doc, jsonBuffer);
    
    if (client.publish(mqttTopic, jsonBuffer)) {
        Serial.println("Data published successfully");
    } else {
        Serial.println("Failed to publish data");
    }
}

void reconnect() {
    while (!client.connected()) {
        Serial.print("Attempting MQTT connection...");
        String client_id = "esp32-client-" + String(WiFi.macAddress());
        if (client.connect(client_id.c_str())) {
            Serial.println("Connected to MQTT broker");
        } else {
            Serial.print("Failed to connect. Retrying in 5 seconds...");
            delay(5000);
        }
    }
}
